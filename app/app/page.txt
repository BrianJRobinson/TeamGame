"use client";

declare global {
  interface Window {
    ethereum?: any;
  }
}

import React from 'react';
import { useState, useEffect, useCallback, useRef } from 'react';
// âœ… Primary WAGMI v2 imports
import {
  useAccount,
  useConnect,
  useDisconnect,
  useChainId,
  useConfig,
  useWriteContract
} from 'wagmi'

import { Button } from '../../components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card';
import { useToast } from '../../hooks/use-toast';
import Image from 'next/image';
import { Twitter, Facebook, Instagram, Github } from 'lucide-react';
import InfoCard from '../../components/my-ui/InfoCard'; // Add this import
import InputCard from '../../components/my-ui/InputCard';
import { ethers } from 'ethers';
import { CONTRACT_ADDRESS, CONTRACT_ABI, ETH_ADDRESS, TOKEN_ADDRESS, ETH_ABI, TOKEN_ABI } from '../../app/Contract';
import { Skeleton } from "../../components/ui/skeleton"; // Make sure you have this component
//import { usePlayerData } from '@/app/utils/helpers';
import { PlayerData } from '../../app/utils/types';
import TeamList from '../../components/my-ui/tsxhelpers';
// Import images
const battleSceneImage = 'images/battlescene2.jpg';
const leftCharacter = 'images/left-character.png';
const rightCharacter = 'images/right-character.png';
const playerIcon = 'images/teamgame-player.png';
const teamIcon = 'images/teamgame-team.png';
const RobotsBattle = 'images/2robots-battle.jpg';
import DogTag from '../../components/my-ui/DogTag';
import { BASE_CHAIN_ID } from '../../app/utils/helpers';
import {
  checkTransaction,
  handleCreatePlayer,
  handleCreateTeam,
  handleJoinTeam,
  fetchCurrentPoolId,
  fetchTeamCost,
  fetchTotalTeamCount,
  fetchTotalPlayerCount,
  fetchETHBalance,
  fetchTokenBalance
} from '../../app/utils/chainfunctions';
import { switchChain } from 'viem/actions';
import { ConnectButton } from '@rainbow-me/rainbowkit';
import '../styles/GameHomepage.css';

// Replace this with your actual deployed contract address
const MAX_CHARS = 20;
const MIN_CHARS = 3;

export function usePlayerData() {
  const { address, isConnected } = useAccount();
  const [playerData, setPlayerData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isError, setIsError] = useState(false);

  const fetchPlayerData = useCallback(async () => {
    if (!isConnected || !address) return;

    setIsLoading(true);
    setIsError(false);

    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);

      const result = await contract.GetPlayerByAddress(address);
      console.log('GetPlayerByAddress result:', result);  // For debugging

      setPlayerData(result);
    } catch (error) {
      console.error('Error fetching player data:', error);
      setIsError(true);
    } finally {
      setIsLoading(false);
    }
  }, [address, isConnected]);

  useEffect(() => {
    fetchPlayerData();
  }, [fetchPlayerData]);

  return { playerData, isError, isLoading, isConnected, refetch: fetchPlayerData };
}

export default function AppPage() {
  const { playerData, isError, isLoading, isConnected, refetch } = usePlayerData();
  const [currentPlayerName, setCurrentPlayerName] = useState('');
  const playerWriteContract = useWriteContract();
  const teamWriteContract = useWriteContract();
  const joinTeamWriteContract = useWriteContract();

  useEffect(() => {
    if (playerData && !isError && !isLoading && isConnected) {
      // Assuming the player data structure includes a 'name' field
      setCurrentPlayerName((playerData as PlayerData).name || 'No name');
    } else {
      setCurrentPlayerName('');
    }
  }, [playerData, isError, isLoading, isConnected]);

  const [playerName, setPlayerName] = useState('');
  const [teamName, setTeamName] = useState('');
  const [teamIdToJoin, setTeamIdToJoin] = useState('');
  const [animate, setAnimate] = useState(false);
  const [isClient, setIsClient] = useState(false);
  const [isCreatingPlayer, setIsCreatingPlayer] = useState(false);
  const [isCreatingTeam, setIsCreatingTeam] = useState(false);
  const [isJoiningTeam, setIsJoiningTeam] = useState(false);
  const { address } = useAccount();
  const { connect } = useConnect();
  const { disconnect } = useDisconnect();
  const { toast } = useToast();
  const [currentPoolId, setCurrentPoolId] = useState<number | null>(null);
  const [currentPoolIdError, setCurrentPoolIdError] = useState<string | null>(null);
  const [teamCost, setTeamCost] = useState<string | null>(null);
  const [teamCostError, setTeamCostError] = useState<string | null>(null);
  const [totalTeamCount, setTotalTeamCount] = useState<string | null>(null);
  const [totalTeamCountError, setTotalTeamCountError] = useState<string | null>(null);
  const [totalPlayerCount, setTotalPlayerCount] = useState<string | null>(null);
  const [totalPlayerCountError, setTotalPlayerCountError] = useState<string | null>(null);
  const [pendingTransactions, setPendingTransactions] = useState<Record<string, boolean>>({});
  const [currentETHBalance, setCurrentETHBalance] = useState<string | null>(null);
  const [currentETHBalanceError, setCurrentETHBalanceError] = useState<string | null>(null);
  const [currentTokenBalance, setCurrentTokenBalance] = useState<string | null>(null);
  const [currentTokenBalanceError, setCurrentTokenBalanceError] = useState<string | null>(null);
  const [lastTransactionHash, setLastTransactionHash] = useState<string | null>(null);
  const [scrollY, setScrollY] = useState(0);
  const [isLoaded, setIsLoaded] = useState(false);
  const [isCorrectChain, setIsCorrectChain] = useState<boolean | null>(true);
  const initialCheckDone = useRef(false);
  const chainId = useChainId();
  const config = useConfig();
  const chains = config.chains;
  const activeChain = chains.find(c => c.id === chainId);


  //const handleConnect = () => connect();

  const handleDisconnect = () => disconnect();


  const getTranslateX = (isLeft: boolean) => {
    if (!isLoaded) return isLeft ? '-100%' : '100%';
    
    const direction = isLeft ? -1 : 1;
    const maxScroll = 500; // Adjust this value to control how quickly the characters move off-screen
    const translateX = Math.min(scrollY / maxScroll, 1) * 100 * direction;
    return `${translateX}%`;
  };

  /* ------------------------------------------------------------------------------------
  Create Player
  */
  const handleCreatePlayerWrapper = useCallback(() => {
    if (
      !isConnected ||
      playerName.trim().length < MIN_CHARS ||
      playerName.trim().length > MAX_CHARS
    ) return;
  
    setIsCreatingPlayer(true);
  
    try {
      playerWriteContract.writeContract({
        address: CONTRACT_ADDRESS,
        abi: CONTRACT_ABI,
        functionName: 'CreatePlayer',
        args: [playerName],
      });
      // No need to await or handle hash here
    } catch (err) {
      console.error('CreatePlayer error:', err);
      setIsCreatingPlayer(false);
    }
  }, [playerName, isConnected, playerWriteContract]);

  useEffect(() => {
    if (playerWriteContract.data) {
      setPendingTransactions(prev => ({
        ...prev,
        [playerWriteContract.data]: true,
      }));
      checkTransaction(
        playerWriteContract.data,
        'player',
        toast,
        setPlayerName,
        setTeamName,
        setTeamIdToJoin,
        setPendingTransactions
      );
      setIsCreatingPlayer(false);
    }
  }, [playerWriteContract.data]);

  useEffect(() => {
    if (playerWriteContract.error) {
      setIsCreatingPlayer(false);
      toast({
        title: "Error",
        description: `Failed to prepare create player transaction: ${playerWriteContract.error.message}`,
        variant: "destructive",
      });      // Optionally show a toast or error message here
    }
  }, [playerWriteContract.error]);

  /* ------------------------------------------------------------------------------------
     Create Team
  */
  const handleCreateTeamWrapper = useCallback(async () => {
    if (
      !isConnected ||
      teamName.trim().length < MIN_CHARS ||
      teamName.trim().length > MAX_CHARS
    ) return;
  
    setIsCreatingTeam(true);

    try {
      teamWriteContract.writeContract({
        address: CONTRACT_ADDRESS,
        abi: CONTRACT_ABI,
        functionName: 'CreateTeam',
        args: [teamName],
      });
  
    } catch (err) {
      console.error('CreatePlayer error:', err);
      setIsCreatingPlayer(false);
    }
  }, [teamName, isConnected, teamWriteContract]);
  
  useEffect(() => {
    if (teamWriteContract.data) {
      setPendingTransactions(prev => ({
        ...prev,
        [teamWriteContract.data]: true,
      }));
      checkTransaction(
        teamWriteContract.data,
        'team',
        toast,
        setPlayerName,
        setTeamName,
        setTeamIdToJoin,
        setPendingTransactions
      );
      setIsCreatingTeam(false);
    }
  }, [teamWriteContract.data]);

  useEffect(() => {
    if (teamWriteContract.error) {
      setIsCreatingTeam(false);
      toast({
        title: "Error",
        description: `Failed to prepare create team transaction: ${teamWriteContract.error.message}`,
        variant: "destructive",
      });      // Optionally show a toast or error message here
    }
  }, [teamWriteContract.error]);

  /* ------------------------------------------------------------------------------------
     Join Team
  */  
  const handleJoinTeamWrapper = useCallback(async () => {
    if (!isConnected || teamIdToJoin.trim() === '') return;
  
    try {
        joinTeamWriteContract.writeContract({
        address: CONTRACT_ADDRESS,
        abi: CONTRACT_ABI,
        functionName: 'JoinTeam',
        args: [parseInt(teamIdToJoin)],
      });
  
    } catch (err) {
      console.error('CreatePlayer error:', err);
      setIsCreatingPlayer(false);
    }
  }, [teamIdToJoin, isConnected]);
  
  useEffect(() => {
    if (joinTeamWriteContract.data) {
      setPendingTransactions(prev => ({
        ...prev,
        [joinTeamWriteContract.data]: true,
      }));
      checkTransaction(
        joinTeamWriteContract.data,
        'join',
        toast,
        setPlayerName,
        setTeamName,
        setTeamIdToJoin,
        setPendingTransactions
      );
      setIsJoiningTeam(false);
    }
  }, [joinTeamWriteContract.data]);

  useEffect(() => {
    if (joinTeamWriteContract.error) {
      setIsJoiningTeam(false);
      toast({
        title: "Error",
        description: `Failed to prepare join team transaction: ${joinTeamWriteContract.error.message}`,
        variant: "destructive",
      });      // Optionally show a toast or error message here
    }
  }, [joinTeamWriteContract.error]);

  useEffect(() => {
      console.log("gett Pool Id");
      fetchCurrentPoolId(setCurrentPoolId, setCurrentPoolIdError, BASE_CHAIN_ID);
  }, [isClient, isConnected]);

  useEffect(() => {
      fetchTeamCost(setTeamCost, setTeamCostError, BASE_CHAIN_ID);
  }, [isClient, isConnected]);

  useEffect(() => {
      fetchTotalTeamCount(setTotalTeamCount, setTotalTeamCountError, BASE_CHAIN_ID);
  }, [isClient, isConnected]);

  useEffect(() => {
      fetchTotalPlayerCount(setTotalPlayerCount, setTotalPlayerCountError, BASE_CHAIN_ID);
  }, [isClient, isConnected]);

  useEffect(() => {
    if (isClient && isConnected && address) {
      fetchETHBalance(address, setCurrentETHBalance, setCurrentETHBalanceError, BASE_CHAIN_ID);
    }
  }, [isClient, isConnected, address, isCorrectChain]);

  useEffect(() => {
    if (isClient && isConnected && address) {
      fetchTokenBalance(address, setCurrentTokenBalance, setCurrentTokenBalanceError, BASE_CHAIN_ID);
    }
  }, [isClient, isConnected, address]);


  useEffect(() => {
    setAnimate(true);
    setIsClient(true);
  }, []);

  // Render placeholder content during SSR
  if (!isClient) {
    return <div>Loading...</div>; // Or any loading indicator you prefer
  }

  return (
    <div className="min-h-screen bg-cover bg-center bg-no-repeat relative overflow-hidden flex flex-col pt-[20vh]"
         style={{backgroundImage: `url(${battleSceneImage})`}}>
      <div className="absolute inset-0 bg-gradient-to-b from-blue-900/70 to-purple-900/70"></div>
      
      {/* Character Images */}
      <div className="relative z-10 flex justify-between items-end pt-40 px-4 sm:px-6 lg:px-8 mx-auto max-w-8xl w-full lg:w-4/5 xl:w-3/4">
        <div style={{ position: 'relative', width: '200px', height: '300px' }}>
          <Image 
            src={leftCharacter} 
            alt="Left Character" 
            fill
            className="transition-all duration-1000 ease-in-out hover:scale-105"
            style={{ objectFit: 'contain' }}
          />
        </div>
        
        <div style={{ position: 'relative', width: '200px', height: '300px' }}>
          <Image 
            src={rightCharacter} 
            alt="Right Character" 
            fill
            className="transition-all duration-1000 ease-in-out hover:scale-105"
            style={{ objectFit: 'contain' }}
          />
        </div>
      </div>

      {/* Hero Container */}
      <div className="relative z-20 bg-gray-900/80 mt-[-50px] py-12 px-4 sm:px-6 lg:px-8 rounded-t-3xl mx-auto md:max-w-8xl w-full lg:w-4/5 xl:w-3/4">
        <div className="md:max-w-screen-2xl mx-auto">
          <div className="flex flex-col items-center w-full mx-auto">
            <h1 className="metallic-text font-orbitron font-bold text-4xl md:text-5xl text-center mb-6">Welcome to MEGA WAR</h1>            
            <div className="w-full mb-4">
            <div className="absolute top-0 right-0 mt-4 mr-4">
              {isConnected ? (
                <ConnectButton showBalance={false} />
              ) : (
                <ConnectButton showBalance={false} />
              )}
            </div>
              <div className="flex flex-col items-center min-h-[200px] max-h-[300px]">
                {!isLoading && isConnected && isCorrectChain && currentPlayerName && currentETHBalance && currentTokenBalance && !isError ? (
                  <DogTag 
                    playerName={currentPlayerName} 
                    ethBalance={currentETHBalance} 
                    tokenBalance={currentTokenBalance} 
                  />
                ) : (
                  <DogTag 
                    playerName='UNKNOWN'
                    ethBalance='0.0' 
                    tokenBalance='0.0' 
                  />
                )}
              </div>
            </div>
            <div>
              <p className="metallic-text font-orbitron font-bold text-center mb-6">Create your player, form a team, and battle for glory!</p>
            </div>
            {/* Game stats grid */}
            {/* Info Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <InfoCard
                title="Team Cost"
                content={teamCostError ? `Error: ${teamCostError}` : (teamCost ? `${teamCost} WETH` : 'Loading...')}
              />
              <InfoCard
                title="Total Teams"
                content={totalTeamCountError ? `Error: ${totalTeamCountError}` : (totalTeamCount ? totalTeamCount : 'Loading...')}
              />
              <InfoCard
                title="Total Players"
                content={totalPlayerCountError ? `Error: ${totalPlayerCountError}` : (totalPlayerCount ? totalPlayerCount : 'Loading...')}
              />
              <InfoCard
                title="Current Pool ID"
                content={currentPoolIdError 
                  ? `Error: ${currentPoolIdError}` 
                  : (currentPoolId !== null ? currentPoolId.toString() : 'Loading...')}
              />
          </div>
          {/* Action Cards */}
          {isConnected && isCorrectChain ? (
            <div className="grid md:grid-cols-2 gap-8">
              {/* Left side: Action Cards */}
              <div className="space-y-6">
                <InputCard
                  cardNumber="1"
                  title="Create a Player"
                  imageSrc={playerIcon}
                  imageAlt="Create Player"
                  inputPlaceholder={ playerData != null ? `Player already registered!` : `Enter player name (Max ${MAX_CHARS})`}
                  inputValue={playerName}
                  onInputChange={(e) => setPlayerName(e.target.value)}
                  buttonText={isCreatingPlayer ? "Creating..." : "Create Player"}
                  onButtonClick={handleCreatePlayerWrapper}
                  isLoading={isCreatingPlayer}
                  isDisabled={!isConnected || isCreatingPlayer || playerData != null}
                  maxChars={MAX_CHARS}
                  minChars={MIN_CHARS}
                />

                <InputCard
                  cardNumber="2"
                  title="Create a Team"
                  imageSrc={teamIcon}
                  imageAlt="Form Team"
                  inputPlaceholder={`Enter team name (Max ${MAX_CHARS})`}
                  inputValue={teamName}
                  onInputChange={(e) => setTeamName(e.target.value)}
                  buttonText={isCreatingTeam || Object.values(pendingTransactions).some(Boolean) ? "Creating..." : "Create Team"}
                  onButtonClick={handleCreateTeamWrapper}
                  isLoading={isCreatingTeam || Object.values(pendingTransactions).some(Boolean)}
                  isDisabled={!isConnected || isCreatingTeam || Object.values(pendingTransactions).some(Boolean)}
                  animationDelay="animation-delay-200"
                  maxChars={MAX_CHARS}
                  minChars={MIN_CHARS}
                />

                <InputCard
                  cardNumber="3"
                  title="Join a Team"
                  imageSrc={RobotsBattle}
                  imageAlt="Compete"
                  inputPlaceholder="Enter team ID to join"
                  inputValue={teamIdToJoin}
                  onInputChange={(e) => setTeamIdToJoin(e.target.value)}
                  buttonText={isJoiningTeam || Object.values(pendingTransactions).some(Boolean) ? "Joining..." : "Join Team"}
                  onButtonClick={handleJoinTeamWrapper}
                  isLoading={isJoiningTeam || Object.values(pendingTransactions).some(Boolean)}
                  isDisabled={!isConnected || isJoiningTeam || Object.values(pendingTransactions).some(Boolean)}
                  animationDelay="animation-delay-400"
                  maxChars={MAX_CHARS}
                  minChars={MIN_CHARS}                
                />
              </div>

              {/* Right side: Team List */}
              <Card className="bg-white/10 backdrop-blur-lg text-white overflow-hidden transform transition-all duration-500 ease-in-out hover:scale-105 animate-slide-up animation-delay-600">
                <CardHeader>
                  <CardTitle>Existing Teams</CardTitle>
                </CardHeader>
                <CardContent>
                  <TeamList />
                </CardContent>
              </Card>
          </div>
          ) : (
            <p className="text-xl text-center text-red-400">
              {isConnected ? "Please switch to the Base chain to interact with the game." : "Please connect your wallet to interact with the game."}
            </p>
          )}          
        </div>
      </div>
    </div>
      {/* Footer */}
      <footer className="relative z-10 bg-gray-900/80 text-white py-8 mt-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="mb-4 md:mb-0">
              <h3 className="text-xl font-bold mb-2">MEGA WAR</h3>
              <p className="text-sm text-gray-300 max-w-md">
                Join the ultimate blockchain-based battle arena. Create your player, form alliances, and compete for glory and rewards in MEGA WAR!
              </p>
            </div>
            <div className="flex space-x-4">
              <a href="#" className="hover:text-blue-400 transition-colors">
                <Twitter size={24} />
              </a>
              <a href="#" className="hover:text-blue-600 transition-colors">
                <Facebook size={24} />
              </a>
              <a href="#" className="hover:text-pink-500 transition-colors">
                <Instagram size={24} />
              </a>
              <a href="#" className="hover:text-gray-400 transition-colors">
                <Github size={24} />
              </a>
            </div>
          </div>
          <div className="mt-8 text-center text-sm text-gray-400">
            Â© 2023 MEGA WAR. All rights reserved.
          </div>
        </div>
      </footer>
    </div>
  );
}